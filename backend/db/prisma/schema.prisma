// This is your Prisma schema file,
// learn more about it 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Anime {
  id             Int             @id @unique
  url            String
  jpg            Jpg?
  webp           Webp?
  score          Float?
  scoredBy       Int?
  rank           Int?
  popularity     Int?
  members        Int
  favorites      Int
  synopsis       String?         @db.LongText
  background     String?         @db.LongText
  approved       Boolean
  trailer        Trailer?
  type           String
  source         String?
  episodes       Int?
  airInfo        AirInfo?
  duration       Int?
  rating         String
  season         String?
  year           Int?
  statistics     Statistics?
  titles         Title[]
  producers      Producer[]
  lincensors     Lincensor[]
  studios        Studio[]
  genres         Genre[]
  explicitGenres ExplicitGenre[]
  demographics   Demographic[]
  themes         Theme[]
  relations      Relation[]
  openings       Opening[]
  endings        Ending[]
  isExplicit     Boolean
  streamingLink  StreamingLink[]
  hash           String          @unique
}

model Manga {
  id             Int             @id @unique
  url            String
  jpg            Jpg?
  score          Float?
  scoredBy       Int?
  rank           Int?
  popularity     Int?
  members        Int
  favorites      Int
  synopsis       String?         @db.LongText
  background     String?         @db.LongText
  approved       Boolean
  type           String
  volumes        Int?
  chapters       Int?
  publishInfo    PublishInfo?
  titles         Title[]
  authors        Author[]
  serializations Serialization[]
  genres         Genre[]
  explicitGenres ExplicitGenre[]
  demographics   Demographic[]
  themes         Theme[]
  relations      Relation[]
  statistics     Statistics?
  isExplicit     Boolean
  hash           String          @unique
}

model Jpg {
  id      Int     @id @default(autoincrement())
  anime   Anime?  @relation(fields: [animeId], references: [id])
  animeId Int?    @unique
  manga   Manga?  @relation(fields: [mangaId], references: [id])
  mangaId Int?    @unique
  small   String?
  medium  String?
  large   String?
  maximum String?
  default String?

  @@unique([animeId, mangaId])
}

model Webp {
  id      Int     @id @default(autoincrement())
  anime   Anime   @relation(fields: [animeId], references: [id])
  animeId Int     @unique
  small   String?
  medium  String?
  large   String?
  maximum String?
  default String?
}

model Title {
  id      Int    @id @default(autoincrement())
  anime   Anime? @relation(fields: [animeId], references: [id])
  animeId Int?
  manga   Manga? @relation(fields: [mangaId], references: [id])
  mangaId Int?
  type    String
  title   String

  @@unique([animeId, mangaId])
}

model Trailer {
  id                Int           @id @default(autoincrement())
  anime             Anime         @relation(fields: [animeId], references: [id])
  animeId           Int           @unique
  url               String
  embedUrl          String
  trailerImageMalId String
  TrailerImage      TrailerImage?
}

model TrailerImage {
  id        Int     @id @default(autoincrement())
  trailer   Trailer @relation(fields: [trailerId], references: [id])
  trailerId Int     @unique
  small     String
  default   String
  medium    String
  large     String
  maximum   String
}

model AirInfo {
  id        Int       @id @default(autoincrement())
  anime     Anime     @relation(fields: [animeId], references: [id])
  animeId   Int       @unique
  status    String
  airing    Boolean
  airedForm DateTime?
  airedTo   DateTime?
}

model Producer {
  id            Int    @id @default(autoincrement())
  anime         Anime  @relation(fields: [animeId], references: [id])
  animeId       Int
  producerMalId Int
  type          String
  name          String
  url           String
}

model Lincensor {
  id             Int    @id @default(autoincrement())
  anime          Anime  @relation(fields: [animeId], references: [id])
  animeId        Int
  lincensorMalId Int
  url            String
  type           String
  name           String
}

model Studio {
  id          Int    @id @default(autoincrement())
  anime       Anime  @relation(fields: [animeId], references: [id])
  animeId     Int
  studioMalId Int
  url         String
  type        String
  name        String
}

model Genre {
  id         Int    @id @default(autoincrement())
  anime      Anime? @relation(fields: [animeId], references: [id])
  animeId    Int?
  manga      Manga? @relation(fields: [mangaId], references: [id])
  mangaId    Int?
  genreMalId Int
  type       String
  name       String
  url        String
  genreType  String

  @@unique([animeId, mangaId])
}

model ExplicitGenre {
  id                 Int    @id @default(autoincrement())
  anime              Anime? @relation(fields: [animeId], references: [id])
  animeId            Int?
  manga              Manga? @relation(fields: [mangaId], references: [id])
  mangaId            Int?
  explicitGenreMalId Int
  type               String
  name               String
  url                String
  genreType          String

  @@unique([animeId, mangaId])
}

model Demographic {
  id               Int    @id @default(autoincrement())
  anime            Anime? @relation(fields: [animeId], references: [id])
  animeId          Int?
  manga            Manga? @relation(fields: [mangaId], references: [id])
  mangaId          Int?
  demographicMalId Int
  type             String
  name             String
  url              String
  genreType        String

  @@unique([animeId, mangaId])
}

model Theme {
  id         Int    @id @default(autoincrement())
  anime      Anime? @relation(fields: [animeId], references: [id])
  animeId    Int?
  manga      Manga? @relation(fields: [mangaId], references: [id])
  mangaId    Int?
  themeMalId Int
  type       String
  name       String
  url        String
  genreType  String

  @@unique([animeId, mangaId])
}

model Relation {
  id           Int    @id @default(autoincrement())
  anime        Anime? @relation(fields: [animeId], references: [id])
  animeId      Int?
  manga        Manga? @relation(fields: [mangaId], references: [id])
  mangaId      Int?
  relationType String
  source       String
  relatedToId  Int

  @@unique([animeId, mangaId])
}

model Opening {
  id      Int    @id @default(autoincrement())
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId Int
  title   String
}

model Ending {
  id      Int    @id @default(autoincrement())
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId Int
  title   String
}

model StreamingLink {
  id      Int    @id @default(autoincrement())
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId Int
  name    String
  url     String
}

model Statistics {
  id            Int     @id @default(autoincrement())
  anime         Anime?  @relation(fields: [animeId], references: [id])
  animeId       Int?    @unique
  manga         Manga?  @relation(fields: [mangaId], references: [id])
  mangaId       Int?    @unique
  completed     Int
  onHold        Int
  dropped       Int
  total         Int
  consuming     Int
  planToConsume Int
  scores        Score[]

  @@unique([animeId, mangaId])
}

model Score {
  id          Int        @id @default(autoincrement())
  statistic   Statistics @relation(fields: [statisticId], references: [id])
  statisticId Int
  score       Int
  votes       Int
  percentage  Float
}

model PublishInfo {
  id            Int       @id @default(autoincrement())
  manga         Manga     @relation(fields: [mangaId], references: [id])
  mangaId       Int       @unique
  status        String
  publishing    Boolean
  publishedFrom DateTime?
  publishedTo   DateTime?
}

model Author {
  id          Int    @id @default(autoincrement())
  manga       Manga  @relation(fields: [mangaId], references: [id])
  mangaId     Int
  authorMalId Int
  type        String
  name        String
  url         String
}

model Serialization {
  id          Int    @id @default(autoincrement())
  manga       Manga  @relation(fields: [mangaId], references: [id])
  mangaId     Int
  authorMalId Int
  type        String
  name        String
  url         String
}
